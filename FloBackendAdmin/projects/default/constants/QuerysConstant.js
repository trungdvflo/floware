const Joi = require("joi");

module.exports = {
  CODE: Joi.number()
    .description('The number of pages posted to the server'),
  STATUS_FLOWJS: Joi.string()
    .valid('done', 'partly_done', 'upload_failed')
    .example('done')
    .description('Status upload flowjs'),
  PAGE: Joi.number()
    .min(1)
    .example(1)
    .description('The number of pages posted to the server'),

  MAX_ROWS: Joi.number()
    .min(1)
    .max(200)
    .example(20)
    .description('Maximum number of rows returned. The default is 20 rows to be returned.'),

  ID: Joi.number()
    .min(-1)
    .example(1)
    .description('Unique value of the table'),
  IDS: Joi.string()
    .example('1,2,3,4,5,6,7')
    .description('List ID of the table RCU'),
  OWNER: Joi.string()
    .example('trungdv@flodev.net')
    .description('email of created user')
    .allow(null, ''),
  VERSION: Joi.string()
    .max(25)
    .example('1.0.1')
    .description('Version Flo app released, format: major.minor.patch'),
  PRE_RELEASE_VERSION: Joi.string()
    .example('alpha.1')
    .description('This is a pre-release of version that denoted by appending a hyphen and a series of dot separated identifiers immediately following the patch version \n Example: \n - alpha \n - alpha.1 \n - beta.2 '),

  CHECKSUM: Joi.string()
    .max(200)
    .example('7cLALFUHSwvEJWSkV8aMreoBe4fhRa4FncC5NoThKxwThL6FDR7hTiPJh1fo2uagnPogisnQsgFgq6mGkt2RBw==')
    .description('It is string and it will be hashed by client side'),

  RELEASE_TITLE: Joi.string()
    .example('Release title')
    .max(128)
    .optional()
    .allow(null, ''),

  RELEASE_MESSAGE: Joi.string()
    .example('Release message')
    .max(512)
    .optional()
    .allow(null, ''),

  EXPIRE_DATE: Joi.number()
    .min(0)
    .example(1566464330.816)
    .optional()
    .allow(null, '')
    .description('date-time expire of the release'),

  IS_EXPIRED: Joi.number()
    .example(1)
    .description('value = 0 (the build does not expire), value = 1 (the build was expired)'),

  MESSAGE_EXPIRE: Joi.string()
    .example('<b>Message expire</b>')
    .max(5000)
    .optional()
    .allow(null, '')
    .description('Admin can note anything on this parameter with HTML format'),

  RELEASE_NOTE: Joi.string()
    .example('<b>Release note</b>')
    .max(65535)
    .optional()
    .allow(null, '')
    .description('Admin can note anything on this parameter with HTML format'),

  DESCRIPTION: Joi.string()
    .example('<b>Description note</b>')
    .max(65535)
    .optional()
    .allow(null, '')
    .description('Admin can note anything on this parameter with HTML format'),

  RELEASE_TYPE: Joi.number()
    .valid(0, 1)
    .example(0)
    .description(` 
        * 0: Minor: normal update 
        \n - 1: Major: any build that requires a removal of existing data and reinstall.`),

  FILE_UID: Joi.string()
    .max(100)
    .example('24f36aee389645429e95e81b93c8d8b2')
    .description('It is ID of file which stored in HDD (it will be generated by server side)'),

  FILE_DSYM_UID: Joi.string()
    .example('nvttalz6nbgs6-201909260-1568691254198')
    .description('It is ID of file which stored in HDD (it will be generated by server side)'),

  FILE: Joi.any()
    .meta({ swaggerType: 'file' })
    .description('Zip file containing updated content'),

  APP_ID: Joi.string()
    .example('e70f1b125cbad944424393cf309efaf0')
    .description('Flo app type, refer to field app_regId of table app_register'),
  PLATFORM: Joi.array()
    .items({
      app_name: Joi.string(),
      app_reg_id: Joi.string(),
      api_version: Joi.string().valid('4.0', '3.2')

    }).example([
      {
        app_name: "Flo iPad",
        app_reg_id: "d944424393cf309e125cbfaf0e70f1ba",
        api_version: "4.0"
      },
      {
        app_name: "Flo Online",
        app_reg_id: "e70f1b125cbad944424393cf309efaf0",
        api_version: "3.2"
      }
    ])
    .description('List all platform per user'),

  FLO_MAC_UPDATE: Joi.number()
    .valid(0, 1)
    .description('Status of Flo Mac update: \n * 0 : not update, \n * 1: updated'),

  IS_INTERNAL: Joi.number()
    .valid(0, 1)
    .description('Get internal user: \n * 0 : external only, \n * 1: internal only'),

  APP_VERSION: Joi.string()
    .example('10.2.3')
    .description('Flo app version'),

  ROLE_NAME: Joi.string(),
  ROLE_ID: Joi.number(),
  ROLE_VALUE: Joi.number(),

  DATA_SETTING: Joi.object()
    .example({
      show_setting: 1,
      confirm_delete: 1
    })
    .description('Data platform setting default JSON'),
  FLO_MAC_UPDATE_FILTER: Joi.string()
    .custom((value, helper) => {
      if (!value) return true;
      const allStatus = [0, 1];// * 0: Not upate \n * 1: Updated
      const passed = value.replace(/\s/g, '')
        .split(',')
        .map((v) => allStatus.find((item) => item === +v))
        .every((v) => v !== undefined);

      return passed ? value : helper.message(`flo_mac_update must be at least one of: ${allStatus.join(', ')}`);
    })
    .example('0,1')
    .description('Status of Flo Mac update: \n * 0 : not update, \n * 1: updated'),

  MIGRATION_STATUS: Joi.string()
    .custom((value, helper) => {
      if (!value) return true;
      const allStatus = [0, 1, 2];// * 0: Not migrate \n * 1: Create new on DB4.0\n * 2: Migrated
      const passed = value.replace(/\s/g, '')
        .split(',')
        .map((v) => allStatus.find((item) => item === +v))
        .every((v) => v !== undefined);

      return passed ? value : helper.message(`migrate_status must be at least one of: ${allStatus.join(', ')}`);
    })
    .example('0,1')
    .description('User migrate status: split by comma prefer value: \n* 0: Not migrate \n * 1: Create new on DB4.0\n * 2: Migrated'),

  APP_IDS: Joi.string()
    .custom((value, helper) => {
      if (!value) return true;
      const allPlatform = [
        'e70f1b125cbad944424393cf309efaf0', // Flo Online
        'ad944424393cf309efaf0e70f1b125cb', // Flo Mac
        'faf0e70f1bad944424393cf309e125cb', // Flo iOS
        'd944424393cf309e125cbfaf0e70f1ba', // Flo iPad
      ];
      const passed = value.replace(/\s/g, '')
        .split(',')
        .map((v) => allPlatform.find((item) => item === v))
        .every((v) => v !== undefined);

      return passed ? value : helper.message(`platform_id must be at least one of: ${allPlatform.join(', ')}`);
    })
    .example('e70f1b125cbad944424393cf309efaf0,e70f1b125cbad944424393cf309efaf0')
    .description('List of Flo app type, split by comma, refer to field app_regId of table app_register'),

  BUILD_NUMBER: Joi.number()
    .example(19082701)
    .description(`
        Unique number that marks the application build number. Rule: 
        \n * Format: yymmddnn >. nn is version 
        \n * The new version must be bigger than the current version in the DB
        `),

  OS_SUPPORT: Joi.string()
    .max(45)
    .example('10.14')
    .optional()
    .allow(null, '')
    .description('Minimum operating system supported for installation'),

  LENGTH: Joi.number()
    .example(105762775)
    .description('The size of the zip file is uploaded'),

  FILE_DSYM: Joi.string()
    .example('FloMac01_dsym.zip')
    .description('This is real name of file which uploaded to server side (it will be shown on the UI of Admin page)'),

  FILE_NAME: Joi.string()
    .max(200)
    .example('FloMac01.zip')
    .optional()
    .allow(null, '')
    .description('This is real name of file which uploaded to server side (it will be shown on the UI of Admin page)'),

  RELEASE_STATUS: Joi.number()
    .valid(0, 1, 2, 3)
    .example(0)
    .description('Status of this release: \n * 0 : not started, \n * 1: in progress, \n * 2: published, \n * 3: declined'),

  RELEASE_TIME: Joi.number()
    .min(0)
    .example(1566464330.816)
    .description('Data creation date'),

  RELEASE_URL_DOWNLOAD: Joi.string()
    .description('The download link of build for force update')
    .example("http://localhost:1321/downloads?keyapi=9d91a2f2-e6f5-44a6-8797-1455be34e407&type=auto_update&uuid=mztdw7ltkbeh2-201909259-1568620854475")
    .max(512),

  CREATED_DATE: Joi.number()
    .example(1566464330.816)
    .description('Data creation date'),

  UPDATED_DATE: Joi.number()
    .example(1566464330.816)
    .description('Date of creating update data'),

  URL_UPDATE_FILE: Joi.string()
    .example(`${process.env.BASE_URL_DOWNLOAD}/downloads?keyapi=9d91a2f2-e6f5-44a6-8797-1455be34e407&type=auto_update&uuid=mztdw7ltkbeh2-201909259-1568620854475`)
    .description('The url shows the download link of the Zip file update'),

  URL_DSYM_FILE: Joi.string()
    .example(`${process.env.BASE_URL_DOWNLOAD}/downloads?keyapi=9d91a2f2-e6f5-44a6-8797-1455be34e407&type=auto_update&uuid=mztdw7ltkbeh2-201909259-1568620854475`)
    .description('The url shows the download link of the Zip file update'),

  KEY_API: Joi.string()
    .example('df1197d444483bf61dac16eb3ebd1273')
    .description('Value authentication of User information'),

  MESSAGE: Joi.string()
    .description('The message returned to the client'),

  OTP: Joi.number()
    .integer()
    .example(31213)
    .description('OTP is a random number associated with certain times'),

  SIGNATURE: Joi.string()
    .example('df1197d444483bf61dac16eb3ebd1273')
    .description('Character strings help preserve data'),

  DOWNLOAD_TYPE: Joi.string()
    .example('auto_update')
    .description('The value contains the downloaded subFolder information'),

  LINK_DOWNLOAD: Joi.string()
    .example(`${process.env.BASE_URL_DOWNLOAD}/downloads?keyapi=9d91a2f2-e6f5-44a6-8797-1455be34e407&type=auto_update&uuid=mztdw7ltkbeh2-201909259-1568620854475`)
    .description('Link download release'),
  /**
     * User Constant
     * */
  FULLNAME: Joi.string()
    .min(2)
    .max(255)
    .example('John Wick')
    .description('User\'s fullname'),
  USER_FULLNAME: Joi.string()
    .max(255)
    .example('John Wick')
    .description('User\'s fullname'),
  USERNAME: Joi.string()
    .min(2)
    .max(50)
    .example('test')
    .description('User\'s username'),
  USER_INCOME: Joi.string()
    .min(2)
    .max(50)
    .example('test')
    .description('User\'s username'),
  EMAIL: Joi.string()
    // .email()
    .min(5)
    .max(500)
    .example('test@flomail.net')
    .description('User\'s email'),

  EMAILS: Joi.string()
    .min(5)
    .example('email1@flomail.net,email2@flomail.net')
    .description(`
        List of user email, split by comma, example:\n
        email1@flomail.net,email2@flomail.net
        `),

  ROLE: Joi.number()
    .min(0)
    .max(100)
    .example(0)
    .description('User\'s role : 0: QA/Team lead  \n - 1: PO '),

  ACCOUNT_3RD: Joi.number()
    .min(0)
    .example(0)
    .description('Amount of third party email'),
  ACCOUNT_3RD_EMAIL: Joi.string()
    .example('test@flomail.net')
    .description('List of third party email'),
  STORAGE: Joi.number()
    .example(0)
    .description('Amount of user storage space'),
  GROUPS: Joi.string()
    .example('Test')
    .description('Group name of user'),
  SUB_ID_CUSTOM: Joi.string()
    .regex(/com.floware.flo.product.|ea0f0fa86f3320eac0a8155a4cc0b8e563dd/)
    .optional()
    .example('com.floware.flo.product.yearlypremium')
    .description('Identify of subscription'),
  SUBS_TYPE_CUSTOM: Joi.string().trim().valid('Standard', 'Premium', 'Pro').required()
    .example('Premium')
    .description('Subscription type'),
  SUBS_TIME_CUSTOM: Joi.string().trim().valid('Monthly', 'Yearly').required()
    .example('Yearly')
    .description('Subscription time'),
  SUB_ID: Joi.string()
    .example('com.floware.flo.product.yearlypremium')
    .description('Identify of subscription'),
  SUBS_TYPE: Joi.string()
    .example('Premium')
    .description('Subscription type'),
  SUBS_TIME: Joi.string()
    .example('Yearly')
    .description('Subscription time'),

  LAST_USED_DATE: Joi.number()
    .min(0)
    .example(1540441032)
    .description(`Last token request
        \n - Note : \n 
        Must input last_used_start AND last_used_end to filter last_used \n 
        * Input just one field will not effect !
        `),

  JOIN_DATE: Joi.number()
    .min(0)
    .example(1540441032)
    .description('Register date'),

  JOIN_DATE_RANGE: Joi.number()
    .min(0)
    .example(1540441032)
    .description(`Register date
        \n - Note :  \n 
        Must input join_date_start AND join_date_end to filter join_date \n 
        * Input just one field will not effect !
        `),

  SUB_CURRENT_DATE: Joi.number()
    .min(0)
    .example(1540441032)
    .description('Subscription apply date'),

  NEXT_RENEWAL: Joi.number()
    .min(0)
    .example(1540441032)
    .description('Subscription expire date'),
  DISABLED: Joi.number()
    .valid(null, 0, 1)
    .example(0)
    .description('Account disabled status: \n* 0: Enable \n - 1: Disable'),
  DELETED: Joi.number()
    .valid(null, 0, 1)
    .example(0)
    .description('Account disabled status: \n* 0: Normal \n - 1: Deleted, able to be recovered'),
  USER_MIGRATE_STATUS:
    Joi.number()
      .valid(0, 1, 2)
      .example(0)
      .description('User migrate status: \n* 0: Not migrate \n * 1: Create new on DB4.0\\n * 2: Migrated'),
  DELETED_PROGRESS: Joi.number()
    .valid(null, 0, 1, 2, 3)
    .example(0)
    .description(`Account disabled status: \n
        0: Deleted, able to be recovered \n 
        1: Database and files cleaning are in progress, unable to be recovered.\n 
        2: Database and files are cleaned, wait for mail server clean all mail. \n
        3: All mails, data, files and user record in users table are cleaned. End progress.
        `),
  DELETED_CLEANING_DATE: Joi.number()
    .example(1540441032)
    .description('Storing the timestamp. After that timestamp, user will not able to be recovered and a daemon (cron) start to clean user’s data.'),

  /**
     * Group Constant
     * */
  LIST_ID: Joi.string()
    .example('2,3,4,5,6,7')
    .description('* List of unique value of the table.'),
  LIST_USER_ID: Joi.string()
    .example('2,3,4,5,6,7')
    .description('* List of user_id.'),
  LIST_GROUP: Joi.string()
    .example('-1,2,3,4,5,6,7')
    .description('* List of group_id. \n - Note : \n _Don\'t send groupId to get all group_ \n _groupId = -1 mean no-group_ \n - Example : -1,2,3,4,5,6,7'),
  GROUP_ID: Joi.number()
    .min(-1)
    .example(1)
    .description('Unique value of group'),
  NUMBER_USERS: Joi.number()
    .min(0)
    .example(1)
    .description('Number users of group'),
  GROUP_NAME: Joi.string()
    .min(1)
    .max(255)
    .example('Group A')
    .description('Group\'s name'),
  GROUP_NUMBER_USERS: Joi.number()
    .min(0)
    .example(1000)
    .description('Number of user available in Group'),
  GROUP_DESCRIPTION: Joi.string()
    .example('Bla Bla Bla')
    .description('Group\'s description'),
  IS_DEFAULT: Joi.number()
    .valid(0, 1)
    .example(0)
    .description('Group default used for new signup internal group'),
  INTERNAL_GROUP: Joi.number()
    .valid(0, 1, 2, 3, 4, 5, 6)
    .example(0)
    .description(`
      1: Web internal group
      2: MAC internal group
      3: Iphone internal group
      4: Ipad internal group
      5: QA internal group
      6: Auto internal group
      `),
  GROUP_TYPE: Joi.string()
    .valid('0', '1', '2')
    .example(0)
    .description(' - 0: Group for QA/Team lead  \n - 1: RELEASE_GROUP: Group for Release \n - 2: Internal user group \n _Note : group_type = 1 only available for role PO'),
  ACCOUNT_TYPE: Joi.string()
    .example('1')
    .description(' - 0: Google \n - 1: Yahoo \n - 2: iCloud \n - 3: Other'),
  SUBSCRIPTION_TYPE: Joi.string()
    .example('0')
    .description(' - 0: Standard \n - 1: Premium \n - 2: Pro'),

  FILTER_KEY: Joi.string()
    .min(1)
    .max(500)
    .example('id,display,created_at')
    .description('List field name will be searched'),
  KEYWORD: Joi.string()
    .min(1)
    .max(100)
    .example('This is value')
    .description(`Keyword search.\n Server will query field-value like %keyword%.\n 
        `),
  FIELDS: Joi.string()
    .min(1)
    .max(500)
    .description('Fields name that client wanted to response'),
  SORT: Joi.string()
    .min(1)
    .max(500)
    .description('Field name and sort type.\n [+] : >> ascending \n [-] : >> descending \n Example : -id,+title '),

  RELEASE_ID: Joi.number()
    .example(4)
    .min(1)
    .description('ID of the table Release'),

  GROUP_RELEASE_TARGET: Joi.number()
    .example(1)
    .valid(0, 1)
    .description(' * 0: Email \n - 2: Group'),

  GROUP_RELEASE_TYPE: Joi.number()
    .example(1)
    .valid(0, 1)
    .description(' * 0: Individual Email/Group \n - 1: All Email/Group'),

  GROUP_RELEASE_USERS: Joi.string()
    .example('email@flomail.net,email1@flomail.net,email2@flomail.net')
    .description(' * List email, working when type === 0'),

  GROUP_RELEASE_GROUP: Joi.string()
    .example('1,2,3,4,5')
    .description(' * List group_id, working when type === 0'),

  GROUP_IDS: Joi.array().items(
    Joi.number().min(1).example(1)
  ).description('ID of the table Groups'),
  /**
     * Upload File
     */
  FLOW_CHUNK_NUMBER: Joi.number()
    .min(1)
    .description('The index of the chunk in the current upload. First chunk is 1 (no base-0 counting here).'),
  FLOW_CHUNK_SIZE: Joi.number()
    .min(1)
    .description(`
        The general chunk size. 
        Using this value and flowTotalSize you can calculate the total number of chunks. 
        Please note that the size of the data received in the HTTP might be lower than flowChunkSize of this for the last chunk for a file.
        `),
  FLOW_CURRENT_CHUNK_SIZE: Joi.number()
    .min(1)
    .description('The index of the chunk in the current upload. First chunk is 1 (no base-0 counting here).'),
  FLOW_TOTAL_SIZE: Joi.number()
    .min(1)
    .description('The total file size.'),
  FLOW_IDENTIFIER: Joi.string()
    .min(1)
    .description('A unique identifier for the file contained in the request.'),
  FLOW_FILE_NAME: Joi.string()
    .description('The original file name (since a bug in Firefox results in the file name not being transmitted in chunk multipart posts).'),
  FLOW_RELATIVE_PATH: Joi.string()
    .description('The file\'s relative path when selecting a directory (defaults to file name in all browsers except Chrome).'),
  FLOW_TOTAL_CHUNKS: Joi.number()
    .min(1)
    .description(' The total number of chunks.'),

  /**
     * Filter
     * */
  FILTER_DATA: Joi.string()
    .example('{a:1,b:2}')
    .description('The data of last filter'),
  OBJ_ID: Joi.string()
    .max(500)
    .example('release_id_123456')
    .description('Key name of filter'),
  OBJ_TYPE: Joi.number()
    .example(0)
    .description(`* The index of ObjID.
        \n Recommend : group objID-objType as a filter of specific feature.
        \n Ex:objID=getVipAccount,objType=0 to filter VipAccount of group release
        `),

  /**
     * Manual rule
     * */
  MANUAL_RULE_NAME: Joi.string()
    .min(1)
    .example('Email from Cong')
    .description('Manual-rule\'s name'),
  MANUAL_RULE_MATCH_TYPE: Joi.number()
    .valid(0, 1)
    .example(0)
    .description('*- 0: **Match all** \n- 1: **Match any**'),
  MANUAL_RULE_ORDER_NUMBER: Joi.number()
    .min(1)
    .example(1)
    .description('Order of manual rule, the smallest one will be apply frist if Message match the rule'),

  MANUAL_RULE_CONDITION_NAME: Joi.string()
    .min(1)
    .example('Subject')
    .description('Manual-rule\'s condition name'),
  MANUAL_RULE_ACTION_NAME: Joi.string()
    .min(1)
    .example('Move message')
    .description('Manual-rule\'s action name'),
  MANUAL_RULE_CONDITION_TYPE_NAME: Joi.string()
    .min(1)
    .example('Move message')
    .description('Condition\'s type name'),
  MANUAL_RULE_CONDITION_VALUE: Joi.string()
    .min(1)
    .example('duocnt')
    .description('Condition\'s match value'),
  MANUAL_RULE_DESTINATION_INPUT_TYPE: Joi.string()
    .valid('collection', 'text', 'combobox', null)
    .example('combobox')
    .description('* The destination input type. \n -Example : \n Action > move email \n Destination type : collection'),

  MANUAL_RULE_DESTINATION_VALUE: Joi.string()
    .min(1)
    .example('1')
    .description(`
        - Action's destination value such as *Priority value* when action is **Set email Priority**
        - This parameter will be null in some case *(maybe in future update)*, such as :  Set Priority, Remove email
        `),
  MANUAL_RULE_DESTINATION_LABEL: Joi.string()
    .min(1)
    .example('Highest')
    .description('* Action\'s destination label'),
  MANUAL_RULE_DESTINATION_SUBVALUE: Joi.string()
    .min(1)
    .example('IMAP PATH')
    .description(`
            - Action's destination Sub-value 
            \n - This parameter is optional, only available in some case such as **Move mail** 
            \n - Example :  IMAP path 
        `),
  /**
     * OS Version
     */
  OS_VERSION_FILTER_KEY: Joi.string()
    .min(1)
    .max(500)
    .example('id,os_name, os_version, os_type')
    .description(`List field name will be searched\n 
        Available filter_key are : \n 
        - id \n 
        - os_name \n 
        - os_version \n 
        - os_type`),
  OS_VERSION_OS_NAME: Joi.string()
    .min(1)
    .max(255)
    .example('macOS Catalina ')
    .description('OS Version name'),
  OS_VERSION_OS_VERSION: Joi.string()
    .max(255)
    .example('10.15.3')
    .description('OS Version'),
  OS_VERSION_OS_TYPE: Joi.number()
    .valid(0, 1, 2)
    .example(0)
    .description(`OS Version type: \n
        0 = mac  \n
        1 = window \n
        2 = ubuntu \n
        `),
  USERS_SORT: Joi.string()
    .min(1)
    .max(500)
    .description('Field name and sort type. \n [+] : >> ascending \n [-] : >> descending \n Note: If missing [+] or [-] Server will sort ascending  \n\n Example : +email,-fullname \n Available field : \n - email \n - fullname \n - groups \n - join_date \n - next_renewal \n  - last_used_date \n  - storage \n - account_3rd \n  - subs_type'),
  /**
     * Admin used storage
     */
  USED_STORAGE_CONTACT: Joi.number().example(0).description('Used storage for contact'),
  USED_STORAGE_EVENT: Joi.number().example(0).description('Used storage for event'),
  USED_STORAGE_MESSAGE: Joi.number().example(0).description('Used storage for message'),
  USED_STORAGE_NOTE: Joi.number().example(0).description('Used storage for note'),
  USED_STORAGE_TODO: Joi.number().example(0).description('Used storage for todo'),
  /**
     * Admin Tracking app
     */
  TRACKING_APP_VERSION: Joi.string().example('0.4.1').description('Tracking app version'),
  TRACKING_BUILD_NUMBER: Joi.string().example('464').description('Tracking app build number'),
  TRACKING_FLO_VERSION: Joi.string().example('0.4.1').description('Tracking app FLO version'),
  TRACKING_LAST_USED_DATE: Joi.number().example(1566464330.000).description('Tracking app last used date'),
  TRACKING_NAME: Joi.string().example('iPad Pro').description('Tracking app name'),
  /**
     * Dashboard
     */
  DASHBOARD_GOOGLE: Joi.number().example(0).description('Total google account'),
  DASHBOARD_YAHOO: Joi.number().example(0).description('Total google account'),
  DASHBOARD_ICLOUD: Joi.number().example(0).description('Total icloud account'),
  DASHBOARD_OTHER_3RD: Joi.number().example(0).description('Total other 3rd account'),
  DASHBOARD_PRE: Joi.number().example(0).description('Total premium account'),
  DASHBOARD_PRO: Joi.number().example(0).description('Total professional account'),
  DASHBOARD_STANDARD: Joi.number().example(0).description('Total standard account'),
  DASHBOARD_USERS: Joi.number().example(0).description('Total account'),
  /**
     * Platform_release
     */
  PLATFORM_RELEASE_FILTER_KEY: Joi.string()
    .min(1)
    .max(500)
    .example('id,app_id,base_release_id')
    .description(`List field name will be searched\n 
        Available filter_key are : \n 
        - id \n 
        - app_id \n 
        - base_release_id \n 
        - destination_release_id \n 
        - force_update \n 
        - title \n 
        - message
        `),

  PLATFORM_RELEASE_SORT: Joi.string()
    .min(1)
    .max(500)
    .description(`
        Field name and sort type.\n 
        [+] : >> ascending \n 
        [-] : >> descending \n 
        Available sort field are : \n 
        - id \n 
        - app_id \n 
        - base_release_id \n 
        - destination_release_id \n 
        - force_update \n 
        - title \n 
        - message
        Example : -id,+app_id `),
  PLATFORM_RELEASE_PUSH_NOTIFICATION_TITLE: Joi.string()
    .description('The message\'s title that client will show to user')
    .max(128),
  PLATFORM_RELEASE_PUSH_NOTIFICATION_MESSAGE: Joi.string()
    .description('The message that client will show to user')
    .max(512),
  PLATFORM_RELEASE_PUSH_NOTIFICATION_FORCE_UPDATE: Joi.number()
    .valid(0, 1)
    .example(0)
    .default(0)
    .description('This is a flag that notifies the client to force an update to the new version. \n Can be either: \n 0: Normal (Default) \n 1: Force_update'),

  BASE_RELEASE_ID: Joi.number()
    .example(4)
    .min(1)
    .description('ID of the table Release. The release that will get push notification'),
  DESTINATION_RELEASE_ID: Joi.number()
    .example(5)
    .min(1)
    .description('ID of the table Release. The release destination that client will update base on base_release_id'),
  HEADERS_KEYAPI: Joi.object({
    keyapi: Joi.string()
      .description('The unique identifier used to authenticate a user')
      .max(128)
      .required()
  }).options({ allowUnknown: true }),

  DEVICE_UID: Joi.string()
    .min(10)
    .max(50)
    .example('E4128CA3-EB4F-45BD-ABF3-68557ECC408D')
    .description('* Character identifier string of the device \n * With FloOnline, Device UUID is generated at random and stored in local storage. '),
  USER_AGENT: Joi.string()
    .max(500)
    .example('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36')
    .description('* User Agent is a web client\'s identification string when sending requests to the web server.')
    .allow(null, ''),
  HEADERS_ACCESS_TOKEN: Joi.object({
    device_uid: Joi.string()
      .min(10)
      .max(50)
      .example('E4128CA3-EB4F-45BD-ABF3-68557ECC408D')
      .description('* Character identifier string of the device \n * With FloOnline, Device UUID is generated at random and stored in local storage. ')
      .required(),
    app_id: Joi.string()
      .min(32)
      .max(32)
      .example('e70f1b125cbad944424393cf309efaf0')
      .description('Flo app type, refer to table app_register')
      .required(),
    authorization: Joi.string()
      .max(200)
      .example('Bearer 5c805d39c962d18b60586d0a00fbe6b1400701cdaba839f709c3a1f331090f6d3a3ccfa715cf365a4032922eafb82530')
      .description('Access tokens are the thing that applications use to make API requests on behalf of a user. \n Format: Bearer {token}')
      .required(),
    user_agent: Joi.string()
      .max(500)
      .example('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36')
      .description('* User Agent is a web client\'s identification string when sending requests to the web server.')
      .optional()
      .allow(null, '')
  }).options({ allowUnknown: true }),

  /**
     * Feedback
     */
  FEEDBACK_ATT_ID: Joi.string()
    .max(255)
    .example('a2e12c0c-8818-4ab6-93ea-9a68d2714860@123flo.com')
    .description('The unique identifier used to authenticate a user'),
  FEEDBACK_FROM: Joi.object({
    name: Joi.string()
      .description('Sender name')
      .max(255)
      .example('Vinh Nguyen')
      .optional()
      .allow(null, ''),
    address: Joi.string()
      .description('Sender email address')
      .example('senderemail@flodev.net')
      .max(255)
      .email()
      .optional()
      .allow(null, '')
  }).allow(null, ''),
  FEEDBACK_SUBJECT: Joi.string()
    .example('Hello world!')
    .max(255)
    .description('Feedback subject'),
  FEEDBACK_HTML: Joi.string()
    .example('Something went wrong!')
    .description('Feedback html'),
  FEEDBACK_ATTACHMENTS: Joi.array().items(
    Joi.object({
      fileName: Joi.string()
        .max(255)
        .example('TheArtofUnitTesting.jpg')
        .optional()
        .allow(null, '')
        .description('Feedback attachment filename'),
      fileUuid: Joi.string()
        .max(255)
        .example('oessymbdkjthc-202012365-1609308470726')
        .optional()
        .allow(null, '')
        .description('Feedback attachment file Uuid')
    }).allow(null, '')
  ).allow(null),
  PLATFORM_NAME: Joi.string()
    .min(1)
    .max(255)
    .example('Platform A')
    .description('Platform\'s name'),
  GROUP_FILTER_TYPE: Joi.number()
    .valid(0, 1)
    .default(0)
    .example(0)
    .description(' - 0: ANY  \n - 1: ALL'),
  ACCESS_TOKEN: Joi.string()
    .max(200)
    .example('Bearer 5c805d39c962d18b60586d0a00fbe6b1400701cdaba839f709c3a1f331090f6d3a3ccfa715cf365a4032922eafb82530')
    .description('Access tokens are the thing that applications use to make API requests on behalf of a user. \n Format: Bearer {token}')
    .required(),
  TERMINATE_STATUS: Joi.number()
    .valid(0, 1)
    .example(0)
    .description(' - 0: Approve  \n - 1: Reject'),
  UPLOAD_STATUS: Joi.number()
    .valid(0, 1, 2, 3)
    .example(0)
    .description(`Files upload status: \n
       0: not uploaded yet \n
       1: uploading.\n
       2: successful upload.\n
       3: upload failed \n`),

  WORKING_TIME: Joi.array().items(
    Joi.object({
      day: Joi.string()
        .example('Mon'),
      iMin: Joi.number()
        .example(32400),
      iMax: Joi.number()
        .example(86400)
    })
  ).example([
    { day: "Mon", iMin: 32400, iMax: 86400 },
    { day: "Tue", iMin: 32400, iMax: 86400 },
    { day: "Wed", iMin: 32400, iMax: 86400 },
    { day: "Thu", iMin: 32400, iMax: 86400 },
    { day: "Fri", iMin: 32400, iMax: 86400 },
    { day: "Sat", iMin: 32400, iMax: 86400 },
    { day: "Sun", iMin: 32400, iMax: 86400 }
  ]),
  WEEK_START: Joi.number()
    .default(0)
    .example(0)
    .description("show the week start is Mon or Sun for calendar"),
  EVENT_DURATION: Joi.number()
    .default(0)
    .example(0)
    .description("default new event duration, accept the number >= 0"),
  ALERT_BEFORE: Joi.number()
    .default(60)
    .example(60)
    .description('default new Normal Event alert, default = 60 (second ), accept the number >= 0'),
  DEFAULT_ALERT_ADE: Joi.number()
    .default(0)
    .example(0)
    .description('default new All Day Event alert (accept the number +/- )'),
  DUE_TASK: Joi.number()
    .default(0)
    .example(0)
    .description('show the week start is Mon or Sun for calendar'),
  DEFAULT_ALERT_TODO: Joi.number()
    .default(0)
    .example(0)
    .description('default for new todo’s: Due date alert (accept the number +/- )'),
  SNOOZE_DEFAULT: Joi.number()
    .default(15)
    .example(15)
    .description('the snooze default , accept the number >= 0'),
  TASK_DURATION: Joi.number()
    .default(0)
    .example(0)
    .description('show the week start is Mon or Sun for calendar'),
  PROTECT_PAGE_CODE: Joi.string()
    .example('189bc2f2336bfc7656d4bb13d477a54d')
    .description('the server will generate the code and encrypt it'),
  PROTECT_PAGE_VERIFY_CODE_RSA: Joi.string()
    .base64()
    .description('The verify_code generated at client side with encrypted RSA')
    .example('pxOJpECDyMHSK2nOKC7iGqMLw0wqg7Wea5WBovxs2SjNtqO9pTJ3gwvNraOfVsIAPHhyA10UaUgiPMJws6XSFJ/81lqadK68Z8/aIoiP+tJc1sEew5nhLG2PvHWSXecaK1uaNycXB/cxEiK2/bdG'
      + 'wqGQnMFTSlydsjzJq4v+doEh5G2WgyS7oGRdmcEZYDfeaQ1aCfXS5Tkuv6QQD4cyLNdEJJ6CvIxQ8wJRwhw8aqWSVu/CL+IpENNRTGJed/Lp1lNQg91FIDI9IvRVzG9YUTN9qvPvTuz5xUeBu3JyLGqlHcJASf'
      + 'Apli8SGU8ikHOC1lJnqysej4Cjq3OV0Ol2Pw=='),
  PROTECT_PAGE_EXPIRE: Joi.number()
    .example('123456')
    .description('the time expire this code (the password protect)'),
  PROTECT_PAGE_NEW_CODE: Joi.number().valid(0, 1).optional().default(0),
  PROTECT_PAGE_VERIFY_CODE: Joi.string().optional().default(''),
  PROTECT_PAGE_CODE_SAVE_STATUS: Joi.number().valid(0, 1)
};
